var recoverSecret = function(triplets) {
    // Step 1: Create a graph of characters
    var graph = {};
    var inDegree = {}; // Track the in-degree of each character

    // Populate the graph and in-degree counts
    triplets.forEach(function(triplet) {
        triplet.forEach(function(character) {
            // Initialize the graph
            if (!graph[character]) graph[character] = [];
            if (!inDegree[character]) inDegree[character] = 0;
        });
        // Establish the directed edges
        graph[triplet[0]].push(triplet[1]);
        graph[triplet[1]].push(triplet[2]);
        // Increment in-degrees for the next characters
        inDegree[triplet[1]]++;
        inDegree[triplet[2]]++;
    });

    // Step 2: Use a queue to perform a topological sort
    var queue = [];
    for (var char in inDegree) {
        if (inDegree[char] === 0) {
            queue.push(char);
        }
    }

    var secret = "";
    while (queue.length > 0) {
        var current = queue.shift();
        secret += current;

        // Decrease in-degrees of the neighbors
        if (graph[current]) {
            graph[current].forEach(function(nextChar) {
                inDegree[nextChar]--;
                if (inDegree[nextChar] === 0) {
                    queue.push(nextChar);
                }
            });
        }
    }

    return secret;
};
