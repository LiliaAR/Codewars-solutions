def find_most_adjacent(grid):
    n = len(grid)
    visited = [[False] * n for _ in range(n)]  # Track visited cells
    max_value = None
    max_size = 0
    
    # Define directions for moving: right, left, down, up
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    
    def dfs(x, y, value):
        # Stack for DFS
        stack = [(x, y)]
        visited[x][y] = True
        size = 0
        
        while stack:
            i, j = stack.pop()
            size += 1
            
            # Explore neighbors
            for di, dj in directions:
                ni, nj = i + di, j + dj
                if 0 <= ni < n and 0 <= nj < n and not visited[ni][nj] and grid[ni][nj] == value:
                    visited[ni][nj] = True
                    stack.append((ni, nj))
                    
        return size

    # Loop through all cells in the grid
    for i in range(n):
        for j in range(n):
            if not visited[i][j]:
                value = grid[i][j]
                group_size = dfs(i, j, value)
                
                # Update max_value and max_size if this group is larger or same size but with a lower value
                if group_size > max_size or (group_size == max_size and (max_value is None or value < max_value)):
                    max_value = value
                    max_size = group_size

    return (max_value, max_size)
