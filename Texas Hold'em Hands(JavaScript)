const RANKS = '2 3 4 5 6 7 8 9 10 J Q K A'.split(' ').reverse();
const SUITS = '♠♦♣♥';
const CARD_RANKS = Object.fromEntries(RANKS.map((r, i) => [r, i]));

function evaluateHand(holeCards, communityCards) {
    const allCards = [...holeCards, ...communityCards];
    const bySuit = SUITS.split('').map(suit => allCards.filter(c => c.endsWith(suit)));
    const rankCounts = allCards.reduce((acc, card) => {
        const rank = card.slice(0, -1);
        acc[rank] = (acc[rank] || 0) + 1;
        return acc;
    }, {});

    const isFlush = bySuit.some(cards => cards.length >= 5);
    const sortedRanks = Object.entries(rankCounts)
        .sort((a, b) => b[1] - a[1] || CARD_RANKS[b[0]] - CARD_RANKS[a[0]]);
    const mostFrequentRanks = sortedRanks.map(([rank]) => rank);
    
    const isStraight = () => {
        const rankValues = Object.keys(rankCounts).map(rank => CARD_RANKS[rank]);
        rankValues.sort((a, b) => b - a);
        for (let i = 0; i <= rankValues.length - 5; i++) {
            if (rankValues.slice(i, i + 5).every((v, idx) => v - idx === rankValues[i])) {
                return rankValues.slice(i, i + 5).map(value => RANKS[12 - value]);
            }
        }
        return null;
    };

    const checkHandRank = () => {
        if (isFlush && isStraight()) return { type: 'straight-flush', ranks: isStraight() };
        if (sortedRanks[0][1] === 4) return { type: 'four-of-a-kind', ranks: mostFrequentRanks.slice(0, 2) };
        if (sortedRanks[0][1] === 3 && sortedRanks[1][1] >= 2) return { type: 'full house', ranks: mostFrequentRanks.slice(0, 2) };
        if (isFlush) return { type: 'flush', ranks: bySuit.find(s => s.length >= 5).map(c => c.slice(0, -1)).slice(0, 5) };
        if (isStraight()) return { type: 'straight', ranks: isStraight() };
        if (sortedRanks[0][1] === 3) return { type: 'three-of-a-kind', ranks: mostFrequentRanks.slice(0, 3) };
        if (sortedRanks[0][1] === 2 && sortedRanks[1][1] === 2) return { type: 'two pair', ranks: mostFrequentRanks.slice(0, 3) };
        if (sortedRanks[0][1] === 2) return { type: 'pair', ranks: mostFrequentRanks.slice(0, 4) };
        return { type: 'nothing', ranks: mostFrequentRanks.slice(0, 5) };
    };

    return checkHandRank();
}
